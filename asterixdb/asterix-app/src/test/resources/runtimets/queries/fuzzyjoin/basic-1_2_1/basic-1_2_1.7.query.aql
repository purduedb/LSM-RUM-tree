/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
use dataverse fuzzyjoin_basic;

set import-private-functions 'true'

for $paperDBLP in dataset('right')
    let $tokensUnrankedDBLP := word-tokens($paperDBLP.authors)
    let $lenDBLP := len($tokensUnrankedDBLP)
    let $tokensDBLP :=
        for $tokenUnranked in $tokensUnrankedDBLP
        let $index :=
            for $tokenRanked at $i in
                //
                // -- - Stage 1 - --
                //
                for $paper in dataset('left')
                let $id := $paper.id
                for $token in word-tokens($paper.authors)
                /*+ hash */
                group by $tokenGrouped := $token with $id
                /*+ inmem 1 302 */
                order by count($id), $tokenGrouped
                return $tokenGrouped
            where $tokenUnranked = /*+ bcast */ $tokenRanked
            return $i
        order by $index[0]
        return $index[0]
order by $paperDBLP.authors
return {"tokens": $tokensUnrankedDBLP, "ranks": $tokensDBLP}